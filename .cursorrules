# Cursor 全局编程规则

## 🚀 快速参考

### 核心开发准则
- **语言**: 中文回复，英文注释和提交信息
- **类型**: 严格 TypeScript，谨慎使用 `any` 并注释说明
- **模块**: ESM 标准，命名导出，按顺序导入
- **测试**: Vitest + happy-dom，AAA 模式，禁用 mock
- **提交**: Conventional Commits，英文描述

### 禁止修改文件
`.stylelintignore` | `.stylelintrc.js` | `build.config.ts` | `biome.json`

### Esmx 特定包名
`core` | `router` | `router-vue` | `rspack` | `rspack-vue` | `import` | `fetch` | `class-state` | `lint`

---

## 框架介绍
- **框架名称**: Esmx (ESM next)
- **框架理念**: Esmx 是基于原生 ESM 的下一代微前端框架，无沙盒无运行时，支持多框架混合开发，并提供高性能服务端渲染能力
- **核心目标**: 推进 ESM 标准的应用和发展，构建面向未来的 JavaScript/TypeScript 开发生态
- **技术特色**: 
  - 基于原生 ESM 和 importmap，零运行时开销
  - 支持 Vue、React、Preact、Solid、Svelte 等多框架
  - 高性能 SSR 与模块联邦能力
  - Monorepo 架构，使用 pnpm workspace + lerna 管理

## AI 交互规则
- **回复语言**: 始终使用中文进行回复。
- **禁止修改文件**: AI 严格禁止修改以下配置文件：
  - `.stylelintignore`
  - `.stylelintrc.js`
  - `build.config.ts`
  - `biome.json`

## 代码规范

### TypeScript 和模块系统
- 始终使用 TypeScript，严格类型检查
- 使用 ESM 模块系统 (import/export)
- 谨慎使用 `any` 类型，优先使用具体类型或泛型
- 当必须使用 `any` 类型时，必须添加详细注释说明使用原因和必要性
- 使用严格的 TypeScript 配置：
  - `strict: true`
  - `noImplicitAny: true`
  - `noImplicitReturns: true`
  - `noUnusedLocals: true`
  - `noUnusedParameters: true`

### 导入导出规范
- 使用命名导出而非默认导出
- **Node.js 内置模块必须使用 `node:` 前缀**，如 `import { readFile } from 'node:fs/promises'`
- 导入语句按以下顺序排列：
  1. Node.js 内置模块（使用 `node:` 前缀）
  2. 第三方库
  3. 项目内部模块
  4. 相对路径导入
- 使用 `import type` 导入仅用于类型的声明
- 删除无用的导入，保持导入列表简洁

### 代码质量
- 函数和变量使用描述性命名
- 使用 const 声明不变的引用，let 声明可变引用
- 避免使用 var
- 使用箭头函数和解构赋值
- 适当使用泛型提高代码复用性
- **代码注释必须使用英文**，包括单行注释和多行注释
- **开发完成或执行检查时，必须识别并删除无用的调试日志**，包括 `console.log`、`console.debug` 等调试输出
- **允许保留错误和警告日志**：`console.error`、`console.warn` 用于错误处理和重要警告信息
- **优先使用 Node.js 原生 API**，避免不必要的第三方依赖
- **定期清理无用的导入和依赖**，保持项目简洁

## 单元测试规范

### 测试框架和工具
- 使用 Vitest 作为测试框架
- 测试文件命名：`*.test.ts` 或 `*.spec.ts`
- DOM 相关测试使用：`*.dom.test.ts`
- 必要时可在文件头部配置测试环境：`@vitest-environment`
- 使用 `happy-dom` 作为浏览器环境模拟

### 测试编写原则
- **谨慎使用 `any` 类型**，包括在测试代码中，必须添加注释说明必要性
- **严格禁止使用 mock 对象**，使用真实对象和依赖
- 每个测试应该独立运行，不依赖其他测试
- 使用描述性的测试名称，清楚表达测试意图
- 遵循 AAA 模式：Arrange（准备）、Act（执行）、Assert（断言）

### 测试结构
```typescript
describe('模块/功能名称', () => {
    // 使用 beforeEach/afterEach 进行测试环境的设置和清理
    beforeEach(() => {
        // 测试前准备
    });

    afterEach(() => {
        // 测试后清理
    });

    describe('具体功能分组', () => {
        it('should 描述期望的行为', () => {
            // Arrange: 准备测试数据和环境
            
            // Act: 执行被测试的代码
            
            // Assert: 验证结果
            expect(actual).toBe(expected);
        });
    });
});
```

### 测试替代方案
- 使用真实的类实例而不是 mock
- 使用内存数据库或文件系统进行集成测试
- 使用 Test Doubles（测试替身）时，创建具体的测试实现类
- 使用依赖注入来替换外部依赖

### 断言规范
- 使用具体的断言方法：`toBe()`, `toEqual()`, `toBeInstanceOf()` 等
- 避免使用通用的 `toBeTruthy()` 或 `toBeFalsy()`，除非确实需要
- 对异步代码使用 `await` 和相应的异步断言

## 错误处理

### 异常处理
- 使用具体的 Error 类型而不是通用 Error
- 提供有意义的错误消息
- 在测试中验证错误处理逻辑

### 类型安全
- 使用类型守卫函数确保运行时类型安全
- 利用 TypeScript 的联合类型和可选链操作符
- 避免类型断言，除非绝对必要

#### any 类型使用指导
当必须使用 `any` 类型时，必须添加详细注释说明使用原因：

**允许场景**: 第三方库缺乏类型定义 | 动态内容运行时类型不确定 | 浏览器原生API对齐 | 临时解决复杂类型推导

**注释格式**:
```typescript
// Using any here because: [具体原因]
// TODO: [改进计划，如果适用]
const data: any = externalLibrary.getData();
```

## 性能和最佳实践

### 代码组织
- 单一职责原则：每个函数/类只做一件事
- 优先使用组合而非继承
- 使用接口定义契约
- 合理使用枚举和常量

### 异步编程
- 优先使用 async/await 而不是 Promise.then()
- 正确处理异步错误
- 在测试中正确等待异步操作完成

### Esmx 特定最佳实践
- **模块导出**: 遵循 ESM 标准，使用命名导出而非默认导出
- **微前端架构**: 确保模块间松耦合，避免直接依赖
- **SSR 优化**: 考虑服务端渲染的性能影响，避免客户端特定 API
- **路由设计**: 使用路径参数和查询参数时考虑类型安全
- **CLI 工具**: 提供清晰的错误信息和使用帮助
- **配置管理**: 使用 TypeScript 接口定义配置结构

## 示例代码风格

```typescript
// Good example - Esmx 风格
import { readFile } from 'node:fs/promises';
import type { RouteConfig, ModuleConfig } from '../types';

interface RouteData {
    path: string;
    component: string;
    meta?: Record<string, unknown>;
}

interface RouteConfig {
    routes: RouteData[];
    mode: 'history' | 'hash';
    base: string;
}

export const createRouteConfig = async (routes: RouteData[]): Promise<RouteConfig> => {
    if (!routes || routes.length === 0) {
        throw new Error('Routes array is required and cannot be empty');
    }
    
    // Validate route paths follow ESM module conventions
    const validatedRoutes = routes.map(route => ({
        ...route,
        path: route.path.startsWith('/') ? route.path : `/${route.path}`
    }));
    
    return {
        routes: validatedRoutes,
        mode: 'history',
        base: '/'
    };
};

// Test example - Esmx 风格
describe('createRouteConfig', () => {
    it('should create valid route configuration with proper ESM structure', async () => {
        // Arrange
        const routes: RouteData[] = [
            { path: 'home', component: './components/Home.vue' },
            { path: 'about', component: './components/About.vue' }
        ];
        
        // Act
        const result = await createRouteConfig(routes);
        
        // Assert
        expect(result.routes).toHaveLength(2);
        expect(result.routes[0].path).toBe('/home');
        expect(result.routes[1].path).toBe('/about');
        expect(result.mode).toBe('history');
        expect(result.base).toBe('/');
    });
    
    it('should throw error when routes array is empty', async () => {
        // Arrange
        const emptyRoutes: RouteData[] = [];
        
        // Act & Assert
        await expect(createRouteConfig(emptyRoutes))
            .rejects
            .toThrow('Routes array is required and cannot be empty');
    });
    
    it('should handle route paths without leading slash', async () => {
        // Arrange
        const routes: RouteData[] = [
            { path: 'products', component: './components/Products.vue' }
        ];
        
        // Act
        const result = await createRouteConfig(routes);
        
        // Assert
        expect(result.routes[0].path).toBe('/products');
    });
});

// Error handling example - Esmx 风格
export class RouteValidationError extends Error {
    constructor(message: string, public readonly invalidRoute: string) {
        super(message);
        this.name = 'RouteValidationError';
    }
}

export const validateRoute = (route: RouteData): void => {
    if (!route.path) {
        throw new RouteValidationError('Route path is required', route.path);
    }
    
    if (!route.component || !route.component.includes('./')) {
        throw new RouteValidationError(
            'Component must be a relative ESM import path',
            route.path
        );
    }
};
```

## 核心开发原则

### 五维开发哲学
在执行任何开发活动时，必须始终从以下五个维度进行思考和评估：

1. **专业性 (Professionalism)**
   - 代码结构合理，遵循最佳实践
   - 接口设计清晰，符合业界标准
   - 错误处理完整，边界情况考虑周全
   - 性能优化合理，避免明显性能问题

2. **真实性 (Authenticity)**
   - 功能实现符合实际需求
   - 测试用例覆盖真实场景
   - 数据验证和业务逻辑正确
   - 避免过度工程化和不必要的复杂性

3. **简洁性 (Simplicity)**
   - 代码清晰易读，逻辑简明
   - 避免重复代码，保持 DRY 原则
   - 接口简洁，职责单一
   - 文档和注释简洁明了

4. **必要性 (Necessity)**
   - 每个功能和代码都应有明确的存在价值
   - 避免为了测试覆盖率而编写无意义的测试
   - 不追求不切实际的完美指标
   - 专注于核心功能和关键路径的质量保证

5. **完整性 (Completeness)**
   - 功能实现应该覆盖所有必要的使用场景
   - 错误处理和边界条件应该全面考虑
   - 接口定义应该包含所有必需的参数和返回值
   - 测试用例应该覆盖主要功能路径和异常情况
   - 文档应该完整描述使用方法和注意事项

### 实施优先级和渐进指导

#### 核心优先级（立即执行）
- **类型安全**：严格 TypeScript 配置，谨慎使用 `any` 类型并注释
- **测试覆盖**：关键业务逻辑必须有测试，遵循 AAA 模式
- **错误处理**：使用具体 Error 类型，提供有意义错误信息

#### 高优先级（根据团队规模：小团队 1-2 周，大团队 2-4 周）
- **导入规范**：统一导入顺序，使用命名导出
- **异步编程**：统一使用 async/await，正确处理异步错误
- **Git 提交**：遵循 Conventional Commits 规范

#### 中优先级（根据团队规模：小团队 1 个月，大团队 2-3 个月）
- **代码结构**：重构违反单一职责原则的代码
- **性能优化**：识别和解决明显性能问题
- **文档完善**：补充关键模块的使用文档

#### 低优先级（持续改进，无固定时间要求）
- **代码风格**：统一箭头函数、解构赋值等风格
- **开发环境**：统一编辑器配置和代码格式化

### 应用指导原则
- **日常开发**：快速评估五个维度（专业性、真实性、简洁性、必要性、完整性）
- **技术决策**：优先考虑实际价值和投入产出比
- **质量平衡**：专注核心质量，避免过度工程化

### 质量检查格式
**检查报告**: 表格格式，使用 ✅ PASS / ❌ FAIL / ⚠️ WARNING 标识
**报告内容**: 检查项 | 状态 | 详细说明 | 改进建议
**总体汇总**: 开头提供检查结果概览和评分

## Git 提交规范

### 提交信息格式
- **必须使用英文编写提交信息**
- 遵循 Conventional Commits 规范：`<type>(<scope>): <description>`

### 提交类型 (type)
- `feat`: new feature
- `fix`: bug fix
- `docs`: documentation updates
- `style`: code formatting (no functional changes)
- `refactor`: code refactoring
- `test`: add or modify tests
- `chore`: build tools, dependency management, etc.
- `perf`: performance optimization
- `ci`: CI/CD related changes

### 作用域 (scope) 规范
- **包级别**: 使用包名 (如 `core`, `router`, `router-vue`, `rspack`, `import`, `fetch`)
- **功能级别**: 使用功能模块 (如 `navigation`, `guards`, `types`, `manifest`, `cli`)
- **选择原则**: 
  - 跨多个模块的改动 → 使用包名
  - 集中在某个功能模块 → 使用功能名
  - 文档和配置类 → 优先使用包名
- **Esmx 特定包**: `core`, `router`, `router-vue`, `rspack`, `rspack-vue`, `import`, `fetch`, `class-state`, `lint`

### 类型选择指导
- **docs vs chore 边界**:
  - package.json 的 description/keywords → `docs`
  - package.json 的 dependencies/scripts → `chore`
  - README/注释更新 → `docs`
  - API 文档/类型注释 → `docs`
  
- **混合改动的优先级判断**:
  1. 主要目的是什么？(文档完善 vs 功能添加)
  2. 影响面最大的是什么？(用户感知度)
  3. 用户最关心的是什么？(可见性和实用性)

### 提交信息示例
```
feat(router): add navigation guards support
feat(core): add SSR manifest generation
feat(rspack): implement module federation support
fix(core): resolve module loading race condition
fix(router): handle route transition edge cases
docs(router-vue): update README translation
docs(core): add package metadata and keywords
docs: add API documentation for navigation guards
test(router): add route transition tests
test(core): add manifest generation tests
chore(router-vue): update build dependencies
chore: update TypeScript configuration
perf(router): optimize route matching algorithm
perf(core): improve module loading performance
```

### 提交要求
- 标题行不超过 50 字符
- 如需详细说明，标题行后空一行再写详细内容
- 使用祈使语气（"add" 而不是 "added"）
- 首字母小写，末尾不加句号

## 规则维护和冲突解决

### 规则更新机制
- **定期评审**：每季度评估规则适用性和有效性
- **团队反馈**：鼓励团队成员提出改进建议
- **版本管理**：重大修改需要版本记录和变更说明
- **渐进迁移**：新规则实施给予合理过渡期

### 冲突解决原则
1. **五维哲学优先**：规则冲突时，优先考虑五个维度的平衡
2. **实用性第一**：选择对项目实际价值更大的方案  
3. **团队协商**：复杂冲突通过团队讨论决定
4. **文档记录**：决策过程和理由需要记录

### 例外情况处理
- **遗留代码**：渐进式改进，无需一次性完全合规
- **第三方依赖**：外部库不符合规范时，在接口层适配
- **紧急修复**：可临时放宽规则，需后续补充完善

### 常见冲突解决案例
- **性能 vs 可读性**：关键路径优先性能，一般代码优先可读性
- **严格类型 vs 开发效率**：核心模块严格类型，辅助工具可适当放宽
- **测试覆盖 vs 开发进度**：核心业务逻辑必须有测试，边缘功能可后补

---

遵循以上规则确保代码质量、类型安全和测试可靠性。