
# 错误处理规范

## ❌ 严格限制 try-catch 使用
- **避免滥用**：禁止"写一段代码就包一个 try-catch"的习惯
- **强正当性要求**：每次使用 try-catch 都必须有充分的正当理由
- **优先 Result 模式**：绝大多数情况下使用 Result 模式处理错误
- **边界层使用**：try-catch 主要用于应用边界层和工具函数封装
- **禁止静默处理**：严禁在 catch 块中静默忽略错误

## ✅ Result 模式（推荐）
```typescript
type Result<T, E = Error> = 
  | { success: true; data: T }
  | { success: false; error: E };

// Recommended error handling approach
const processUser = async (userData: unknown): Promise<Result<User, ValidationError>> => {
  if (!userData || typeof userData !== 'object') {
    return { 
      success: false, 
      error: new ValidationError('Invalid user data format') 
    };
  }
  
  const validationResult = validateUserData(userData);
  if (!validationResult.success) {
    return validationResult;
  }
  
  return { success: true, data: validationResult.data };
};
```

## 📝 try-catch 合理使用场景

**允许使用 try-catch 的正当理由**：

### 1. 工具函数封装
包括安全操作函数和 Result 模式适配器：

```typescript
// ✅ Valid use: Wrapping lower-level APIs into Result pattern
export const safeJsonParse = <T>(jsonString: string): Result<T, Error> => {
  try {
    const parsed = JSON.parse(jsonString);
    return { success: true, data: parsed };
  } catch (error) {
    return { success: false, error: error as Error };
  }
};

export const safeDbOperation = async <T>(
  operation: () => Promise<T>
): Promise<Result<T, Error>> => {
  try {
    const result = await operation();
    return { success: true, data: result };
  } catch (error) {
    return { success: false, error: error as Error };
  }
};

// ✅ Safe getter operations - allowed to return null
export const getUserById = async (id: string): Promise<User | null> => {
  const dbResult = await safeDbOperation(() => db.user.findById(id));
  return dbResult.success ? dbResult.data : null;
};

export const getConfigValue = async (key: string): Promise<string | null> => {
  const configResult = await safeReadFile('config.json');
  if (!configResult.success) {
    return null;
  }
  
  const parseResult = safeJsonParse<Record<string, string>>(configResult.data);
  if (!parseResult.success) {
    return null;
  }
  
  return parseResult.data[key] || null;
};

// ✅ Safe query operations
export const findUserByEmail = async (email: string): Promise<User | null> => {
  const result = await safeDbOperation(() => db.user.findByEmail(email));
  return result.success ? result.data : null;
};
```

**安全操作函数特征**：
- 函数名通常以 `get`、`find`、`fetch` 开头
- 返回类型为 `T | null`
- 失败时不会影响主要业务流程
- 调用方可以安全地处理 `null` 值

### 2. 应用边界层
```typescript
// ✅ Valid use: Unified error handling at application boundary
const handleApiRequest = async (req: Request, res: Response) => {
  try {
    const result = await processUserRequest(req.body);
    
    if (!result.success) {
      const statusCode = getErrorStatusCode(result.error);
      res.status(statusCode).json({
        error: result.error.message,
        code: result.error.code
      });
      return;
    }
    
    res.json(result.data);
  } catch (error) {
    // Catch unexpected system-level errors
    console.error('Unexpected system error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};
```

### 3. 第三方库适配
```typescript
// ✅ Valid use: Adapting third-party libraries that don't support Result pattern
const adaptThirdPartyApi = async (params: ApiParams): Promise<Result<ApiResponse, Error>> => {
  try {
    // Third-party library may throw exceptions, need adaptation
    const response = await thirdPartyLibrary.callApi(params);
    return { success: true, data: response };
  } catch (error) {
    return { success: false, error: error as Error };
  }
};
```

### 4. 资源清理场景
```typescript
// ✅ Valid use: Ensuring resource cleanup
const processFileWithCleanup = async (filePath: string): Promise<Result<ProcessedData, Error>> => {
  let fileHandle: FileHandle | null = null;
  
  try {
    fileHandle = await fs.open(filePath, 'r');
    const result = await processFileHandle(fileHandle);
    return result;
  } catch (error) {
    return { success: false, error: error as Error };
  } finally {
    // Ensure resources are cleaned up
    if (fileHandle) {
      await fileHandle.close();
    }
  }
};
```

## ❌ 禁止的 try-catch 使用

### 1. 业务逻辑中的懒惰包装
```typescript
// ❌ Forbidden: Lazily wrapping every piece of code
const createUser = async (userData: any) => {
  try {
    const user = await userService.create(userData);
    return user;
  } catch (error) {
    console.log('Error creating user:', error);
    return null; // Silent failure, hiding problems
  }
};
```

### 2. 静默错误处理
```typescript
// ❌ Forbidden: Silently ignoring errors
const fetchUserData = async (id: string) => {
  try {
    return await api.getUser(id);
  } catch (error) {
    return {}; // Silent return of empty object, hiding failure
  }
};
```

### 3. 过度嵌套的错误处理
```typescript
// ❌ Forbidden: Wrapping every operation with try-catch
const complexOperation = async () => {
  try {
    const step1 = await operation1();
    try {
      const step2 = await operation2(step1);
      try {
        return await operation3(step2);
      } catch (error3) {
        console.log('Step 3 failed');
        return null;
      }
    } catch (error2) {
      console.log('Step 2 failed');
      return null;
    }
  } catch (error1) {
    console.log('Step 1 failed');
    return null;
  }
};
```

## 错误处理策略
- **禁止假装成功**: 执行失败了不能假装成功，要根据业务情况正确处理
- **显式处理**: 每个可能失败的操作都必须显式检查Result
- **早期返回**: 使用早期返回处理错误条件，避免深层嵌套
- **错误传播**: 让错误向上传播到能够处理的边界层
- **类型安全**: 使用具体的错误类型，提供详细的错误信息
- **正当性检查**: try-catch 使用前必须确认有充分的正当理由

## 严格的错误流程控制
**核心原则**: 执行失败了不能假装成功，要根据业务情况正确处理错误。

### 文件操作示例
```typescript
// ❌ Forbidden approach - Abusing try-catch
try {
  const content = await fs.readFile('config.json', 'utf-8');
  return JSON.parse(content);
} catch (error) {
  console.log('File read failed, using default config');
  return defaultConfig; // Error: Continue execution after failure
}

// ✅ Correct approach - Result pattern + early return
const readConfigFile = async (filePath: string): Promise<Result<Config, FileError>> => {
  // Use file reading tools that support Result pattern
  const fileResult = await safeReadFile(filePath);
  if (!fileResult.success) {
    return { success: false, error: new FileError('Failed to read config file', filePath) };
  }
  
  const parseResult = safeJsonParse<Config>(fileResult.data);
  if (!parseResult.success) {
    return { success: false, error: new FileError('Invalid JSON in config file', filePath) };
  }
  
  return { success: true, data: parseResult.data };
};

// Caller must explicitly handle errors
const initializeApp = async (): Promise<Result<App, InitError>> => {
  const configResult = await readConfigFile('config.json');
  if (!configResult.success) {
    // Return immediately on error, never continue execution
    return { success: false, error: new InitError('Config loading failed', configResult.error) };
  }
  
  // Only continue when successful
  return createApp(configResult.data);
};
```

### 网络请求示例
```typescript
// ❌ Forbidden approach
try {
  const response = await fetch('/api/users');
  const users = await response.json();
  return users;
} catch (error) {
  return []; // Error: Return empty array after failure and continue execution
}

// ✅ Correct approach
const fetchUsers = async (): Promise<Result<User[], NetworkError>> => {
  const response = await safeFetch('/api/users');
  if (!response.success) {
    return { success: false, error: new NetworkError('Failed to fetch users', response.error) };
  }
  
  if (!response.data.ok) {
    return { 
      success: false, 
      error: new NetworkError(`HTTP ${response.data.status}: ${response.data.statusText}`) 
    };
  }
  
  const jsonResult = await safeJsonParse<User[]>(await response.data.text());
  if (!jsonResult.success) {
    return { success: false, error: new NetworkError('Invalid JSON response', jsonResult.error) };
  }
  
  return { success: true, data: jsonResult.data };
};
```

### 数据库操作示例
```typescript
// ❌ Forbidden approach
try {
  const user = await db.user.create(userData);
  return user;
} catch (error) {
  console.error('Database error:', error);
  return null; // Error: Return null after failure and continue execution
}

// ✅ Correct approach
const createUser = async (userData: CreateUserData): Promise<Result<User, DatabaseError>> => {
  const validationResult = validateUserData(userData);
  if (!validationResult.success) {
    return { success: false, error: new DatabaseError('Validation failed', validationResult.error) };
  }
  
  const dbResult = await safeDbOperation(() => db.user.create(validationResult.data));
  if (!dbResult.success) {
    return { success: false, error: new DatabaseError('Failed to create user', dbResult.error) };
  }
  
  return { success: true, data: dbResult.data };
};
```

## 自定义错误类型
```typescript
export class ValidationError extends Error {
  constructor(
    message: string, 
    public readonly field: string,
    public readonly code: string
  ) {
    super(message);
    this.name = 'ValidationError';
  }
}

export class FileError extends Error {
  constructor(
    message: string,
    public readonly filePath: string,
    public readonly originalError?: Error
  ) {
    super(message);
    this.name = 'FileError';
  }
}

export class NetworkError extends Error {
  constructor(
    message: string,
    public readonly originalError?: Error
  ) {
    super(message);
    this.name = 'NetworkError';
  }
}

export class DatabaseError extends Error {
  constructor(
    message: string,
    public readonly originalError?: Error
  ) {
    super(message);
    this.name = 'DatabaseError';
  }
}
```

## 工具函数示例
```typescript
// Safe file reading
export const safeReadFile = async (filePath: string): Promise<Result<string, Error>> => {
  return new Promise((resolve) => {
    fs.readFile(filePath, 'utf-8', (err, data) => {
      if (err) {
        resolve({ success: false, error: err });
      } else {
        resolve({ success: true, data });
      }
    });
  });
};

// Safe JSON parsing
export const safeJsonParse = <T>(jsonString: string): Result<T, Error> => {
  let parsed: T;
  try {
    parsed = JSON.parse(jsonString);
  } catch (error) {
    return { success: false, error: error as Error };
  }
  return { success: true, data: parsed };
};

// Safe database operations
export const safeDbOperation = async <T>(
  operation: () => Promise<T>
): Promise<Result<T, Error>> => {
  let result: T;
  try {
    result = await operation();
  } catch (error) {
    return { success: false, error: error as Error };
  }
  return { success: true, data: result };
};
