---
description:
globs:
alwaysApply: false
---
# GitHub PR 工作流规则

## 工作流概述
作为AI助手，我将严格遵循六阶段PR工作流程，确保代码质量和流程规范。每个阶段都有明确标识，需要用户确认才能进入下一阶段。

## 阶段标识系统
1. 需求讨论阶段 [🔵]
2. 分支创建阶段 [🟣]
3. 开发阶段 [🟢]
4. 代码提交阶段 [🟡]
5. PR内容预览阶段 [🟠]
6. PR提交阶段 [✅]

## 阶段转换规则
- 每个阶段转换只需用户回复"确认"即可
- 每次响应开头必须标注当前阶段状态
- 需求未讨论清楚前，禁止开始修改代码
- 代码修改前必须先描述修改内容并获得许可

## 阶段详述

### 1. 需求讨论阶段 [🔵]
- 开始语："[🔵 需求讨论阶段] 我们现在处于需求讨论阶段，专注于理解需求，不会进行任何代码修改。"
- 主要任务：理解需求、澄清细节、分析技术方案
- 禁止行为：提供具体代码、进行任何代码修改
- 结束确认："需求讨论已完成。请回复'确认'进入分支创建阶段。"

### 2. 分支创建阶段 [🟣]
- 开始语："[🟣 分支创建阶段] 我们现在进入分支创建阶段，将创建新的开发分支。"
- 首要任务：询问源分支，如"请问从哪个分支创建新分支？"
- 分支命名规范：
  * `feat-功能名称-简短描述`
  * `fix-问题描述-问题编号`
  * `docs-更新内容`
  * `perf-优化对象`
- 必要操作：先拉取最新代码，再创建分支
- 结束确认："分支已成功创建。请回复'确认'进入开发阶段。"

### 3. 开发阶段 [🟢]
- 开始语："[🟢 开发阶段] 我们现在进入开发阶段，将在本地进行代码修改（禁止提交代码）。"
- 强制前置：描述计划修改内容并等待"允许修改"确认
- 禁止行为：执行任何git commit或git push操作
- 代码规范：遵循项目已有风格，英文注释，包含必要测试
- 结束确认："代码开发已完成。请回复'确认'进入代码提交阶段。"

### 4. 代码提交阶段 [🟡]
- 开始语："[🟡 代码提交阶段] 我们现在进入代码提交阶段，将提交已完成的代码变更。"
- 主要任务：显示变更文件、准备提交信息、执行提交命令
- 提交规范：遵循Conventional Commits格式
- 结束确认："代码已成功提交。请回复'确认'进入PR预览阶段。"

### 5. PR内容预览阶段 [🟠]
- 开始语："[🟠 PR预览阶段] 我们现在进入PR内容预览阶段，将讨论PR的内容和修改细节。"
- 主要任务：讨论PR内容、审查代码、准备双语描述
- 双语准备：先确认中文版本，再生成对应英文版
- 结束确认："PR内容已预览并确认。请回复'确认'进入PR提交阶段。"

### 6. PR提交阶段 [✅]
- 开始语："[✅ PR提交阶段] 我们现在进入PR提交阶段，将正式创建并提交PR。"
- 主要任务：使用已确认的英文标题和描述创建PR
- 结束任务：显示PR链接和状态，继续中文沟通

## 紧急控制机制
| 指令 | 效果 |
|------|------|
| "紧急停止" | 立即停止当前操作 |
| "返回讨论阶段" | 返回到需求讨论阶段 |
| "返回上一阶段" | 返回到上一个阶段 |
| "暂停" | 暂停操作，等待指示 |

## 安全措施
- 修改确认：回复"允许修改"才能执行代码修改
- 阶段可视化：每次回复都在开头标注当前阶段
- 阶段锁定：未经确认不得跨越阶段