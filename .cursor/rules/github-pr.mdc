# GitHub PR 工作流规则 (强化版)

## 工作流概述
本工作流规定了PR流程中的六个严格顺序阶段，每个阶段有明确的进入条件、操作范围和退出标准。任何阶段转换必须经过用户明确确认，且每次交互都必须遵循严格的阶段标识和状态管理。

## 阶段标识系统
1. 需求讨论阶段 [🔵]
2. 分支创建阶段 [🟣] 
3. 开发阶段 [🟢]
4. 代码提交阶段 [🟡]
5. PR内容预览阶段 [🟠]
6. PR提交阶段 [✅]

## 核心规则

### 强制执行原则
1. **严格阶段隔离**: 禁止执行非当前阶段的操作
2. **显式阶段标识**: 每次回复必须以当前阶段标识开头
3. **状态完整性**: 每个阶段必须完成所有必要任务后才能进入下一阶段
4. **用户确认优先**: 所有阶段转换必须经过用户明确确认
5. **前置条件验证**: 进入每个阶段前必须验证前置条件
6. **修改权限控制**: 代码修改需获得明确授权

## 阶段详述

### 1. 需求讨论阶段 [🔵]
- **阶段开始语**:
```
[🔵 需求讨论阶段] 状态:[0/3]
我们现在处于需求讨论阶段，专注于理解需求，不会进行任何代码修改。
```

- **允许操作**:
  * 需求分析与澄清
  * 代码查看与问题定位
  * 技术方案讨论

- **禁止操作**:
  * 任何代码修改
  * Git相关命令
  * 具体实现细节编写

- **前置条件**: 用户提出需求或问题

- **完成标准**:
  * 需求完全理解
  * 解决方案明确
  * 技术路径确定

- **阶段结束语**:
```
需求讨论已完成，我们已明确:
1. [需求点1]
2. [需求点2]
3. [解决方案概述]

请回复"确认"进入分支创建阶段。
```

### 2. 分支创建阶段 [🟣]
- **阶段开始语**:
```
[🟣 分支创建阶段] 状态:[0/2]
我们现在进入分支创建阶段，将创建新的开发分支。
```

- **首要任务**: 确定源分支
```
请问从哪个分支创建新分支？(通常是master或main)
```

- **分支命名规范**:
  * `feat-功能名称-简短描述`
  * `fix-问题描述-问题编号`
  * `docs-更新内容`
  * `perf-优化对象`

- **必要操作顺序**:
  1. 切换到源分支
  2. 拉取最新代码
  3. 创建新分支
  4. 确认分支创建成功

- **禁止操作**:
  * 代码修改
  * 提交操作

- **前置条件**: 需求讨论阶段已完成并获确认

- **阶段结束语**:
```
[🟣 分支创建阶段] 状态:[2/2]
分支已成功创建:
- 分支名称: [分支名]
- 基于分支: [源分支]
- 当前状态: 已切换到新分支

请回复"确认"进入开发阶段。
```

### 3. 开发阶段 [🟢]
- **阶段开始语**:
```
[🟢 开发阶段] 状态:[0/3]
我们现在进入开发阶段，将在本地进行代码修改（禁止提交代码）。
```

- **强制前置流程**:
```
我计划修改以下内容:
1. [文件路径1]: [修改内容概述]
2. [文件路径2]: [修改内容概述]
...

请回复"允许修改"以授权我开始代码修改。
```

- **允许操作**:
  * 文件读取
  * 代码修改
  * 代码分析

- **禁止操作**:
  * Git提交命令
  * 分支推送
  * PR创建

- **代码规范**:
  * 遵循项目已有风格
  * 英文注释
  * 包含必要测试

- **前置条件**: 
  * 分支创建成功
  * 获得"允许修改"确认

- **阶段结束语**:
```
[🟢 开发阶段] 状态:[3/3]
代码开发已完成:
1. 修改了[x]个文件
2. 实现了[功能/修复]
3. 所有修改已在本地完成，尚未提交

请回复"确认"进入代码提交阶段。
```

### 4. 代码提交阶段 [🟡]
- **阶段开始语**:
```
[🟡 代码提交阶段] 状态:[0/2]
我们现在进入代码提交阶段，将提交已完成的代码变更。
```

- **必要步骤**:
  1. 显示变更文件列表
  2. 准备提交信息(遵循Conventional Commits)
  3. 执行git add和commit命令

- **提交信息格式**:
```
<type>(<scope>): <description>

[可选正文]

[可选脚注]
```

- **禁止操作**:
  * git push
  * PR相关操作

- **前置条件**: 开发阶段已完成并获确认

- **阶段结束语**:
```
[🟡 代码提交阶段] 状态:[2/2]
代码已成功提交:
- 提交ID: [commit hash]
- 提交信息: [commit message]
- 提交文件: [文件列表]

请回复"确认"进入PR预览阶段。
```

### 5. PR内容预览阶段 [🟠]
- **阶段开始语**:
```
[🟠 PR预览阶段] 状态:[0/3]
我们现在进入PR内容预览阶段，将讨论PR的内容和修改细节。
```

- **主要任务**:
  * 讨论PR内容
  * 审查代码修改
  * 准备PR描述(双语)

- **双语PR准备流程**:
  1. 准备并同时展示中英文PR标题与描述草稿
  2. 用户一次性确认或提出修改建议
  3. 根据反馈调整后再次展示完整双语内容
  4. 用户确认最终双语内容

- **PR描述模板**:
```
**Feature Description:**
简短功能或修复描述

**Implementation Details:**
- 实现要点1
- 实现要点2
- 技术决策及理由

**Testing:**
如何测试及验证此更改

**Potential Impact:**
可能受影响的区域
```

- **前置条件**: 代码提交阶段已完成并获确认

- **阶段结束语**:
```
[🟠 PR预览阶段] 状态:[3/3]
PR内容已准备完成:
- PR标题: [标题]
- PR描述已确认(中英文)
- 所有代码修改已审查

请回复"确认"进入PR提交阶段。
```

### 6. PR提交阶段 [✅]
- **阶段开始语**:
```
[✅ PR提交阶段] 状态:[0/2]
我们现在进入PR提交阶段，将正式创建并提交PR。
```

- **必要步骤**:
  1. 推送分支到远程仓库
  2. 使用确认后的标题和描述创建PR

- **前置条件**: 
  * PR内容预览阶段已完成
  * 双语PR内容已确认

- **阶段结束语**:
```
[✅ PR提交阶段] 状态:[2/2]
PR已成功创建:
- PR链接: [PR URL]
- 标题: [PR标题]
- 分支: [源分支] → [目标分支]

PR流程已全部完成，感谢您的配合！
```

## 状态管理与控制系统

### 状态跟踪格式
每次回复必须包含标准格式的状态头:
```
[阶段标识] 状态:[已完成任务/总任务]
```

### 阶段检查点系统
- **进入检查**:
  * 前序阶段已完成标志
  * 用户确认已收到
  * 所有前置条件满足

- **退出检查**:
  * 当前阶段所有任务已完成
  * 阶段成果符合要求
  * 过渡条件满足

### 权限控制矩阵

| 阶段 | 允许的操作 | 禁止的操作 |
|------|------------|------------|
| 需求讨论[🔵] | 分析、查询、读取 | 修改代码、Git操作 |
| 分支创建[🟣] | git checkout、branch | 修改代码、提交代码 |
| 开发[🟢] | 修改代码、测试 | git commit、push |
| 代码提交[🟡] | git add、commit | push、创建PR |
| PR预览[🟠] | 查看代码、讨论内容 | 修改代码、push |
| PR提交[✅] | git push、PR创建 | 修改已提交代码 |

## 紧急控制与恢复机制

### 紧急控制指令
| 指令 | 效果 |
|------|------|
| "紧急停止" | 立即停止当前操作 |
| "返回讨论阶段" | 返回到需求讨论阶段 |
| "返回上一阶段" | 返回到上一个阶段 |
| "暂停" | 暂停操作，等待指示 |
| "恢复正确阶段" | 自动检测并恢复到应处的正确阶段 |

### 错误检测与恢复
- **检测机制**: 每次回复前检查操作是否符合当前阶段权限
- **自动纠错**: 发现阶段错误时立即警告并停止当前操作
- **状态恢复**: 提供阶段恢复选项，确保流程可以回到正轨
- **日志记录**: 记录每次阶段转换，便于追踪和审计

### 二次确认机制
关键操作(如提交、Push等)需要二次确认:
```
请确认执行[操作]，回复"确认[操作]"继续
```

## 特殊情况处理

### 需求变更
1. 立即暂停当前流程
2. 返回需求讨论阶段
3. 分析变更影响
4. 重新确认方案
5. 按新需求重启流程

### 冲突处理
1. 暂停当前操作
2. 分析冲突原因
3. 提供解决方案
4. 获取用户确认后继续

### 流程中断恢复
1. 识别上次执行的阶段和任务
2. 验证当前状态
3. 提供恢复选项
4. 在用户确认后恢复流程 