---
alwaysApply: true
---


# Web 前端开发规范

通用的前端开发编程规范，适用于任何技术栈和项目。

## 🌟 最高指导原则
**写简洁、安全、自解释的代码**

## 核心原则
- 编写简洁、技术性强的代码，提供准确示例
- 使用面向对象 + 函数式编程模式
- 优先选择迭代和模块化，避免代码重复
- 使用描述性变量名，带有辅助动词（如 isLoading, hasError）

## 语言使用规范
遵循 `language-standards.mdc` 中的语言使用规范

## 注释使用策略
- **规范文档中的示例**：允许使用注释说明代码意图
- **生产代码**：优先使用自解释的变量名和函数名，减少注释依赖
- **测试代码**：使用 AAA 模式时用换行分隔，无需注释
- **注释语言**：所有注释必须使用英文

## 开发要求
- 严格限制 try-catch 使用，优先使用 Result 模式
- 严格遵循 TypeScript 类型安全
- 遵循 Conventional Commits 提交规范
- 分支命名使用短杠分隔符

## 测试要求
- 编写有意义的测试名称，描述期望行为
- 使用 AAA 模式：Arrange（准备）、Act（执行）、Assert（断言）
- 每次测试一个功能
- 禁止 mock 对象，一律使用真实对象
- 确保测试隔离且可独立运行

# Web 前端开发规范

通用的前端开发编程规范，适用于任何技术栈和项目。

## 🌟 最高指导原则
**写简洁、安全、自解释的代码**

## 核心原则
- 编写简洁、技术性强的代码，提供准确示例
- 使用面向对象 + 函数式编程模式
- 优先选择迭代和模块化，避免代码重复
- 使用描述性变量名，带有辅助动词（如 isLoading, hasError）

## 语言使用规范
遵循 `language-standards.mdc` 中的语言使用规范

## 注释使用策略
- **规范文档中的示例**：允许使用注释说明代码意图
- **生产代码**：优先使用自解释的变量名和函数名，减少注释依赖
- **测试代码**：使用 AAA 模式时用换行分隔，无需注释
- **注释语言**：所有注释必须使用英文

## 开发要求
- 严格限制 try-catch 使用，优先使用 Result 模式
- 严格遵循 TypeScript 类型安全
- 遵循 Conventional Commits 提交规范
- 分支命名使用短杠分隔符

## 测试要求
- 编写有意义的测试名称，描述期望行为
- 使用 AAA 模式：Arrange（准备）、Act（执行）、Assert（断言）
- 每次测试一个功能
- 禁止 mock 对象，一律使用真实对象
- 确保测试隔离且可独立运行
